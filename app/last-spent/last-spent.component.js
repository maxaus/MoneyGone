"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var spent_item_service_1 = require("../shared/spent-item.service");
var nativescript_angular_1 = require("nativescript-angular");
var dialogs_1 = require("ui/dialogs");
var moment = require("moment");
var LastSpentComponent = (function () {
    function LastSpentComponent(spentItemService, routerExtensions, pageRoute) {
        var _this = this;
        this.spentItemService = spentItemService;
        this.routerExtensions = routerExtensions;
        this.pageRoute = pageRoute;
        this.items = [];
        this.sortCol = 'dateAdded';
        this.sortDir = 'DESC';
        this.totalSum = 0;
        this.excludedSum = 0;
        this.deleteConfirmOptions = {
            title: "Confirm Delete",
            message: "Do you really want to remove this item?",
            okButtonText: "Yes",
            cancelButtonText: "No"
        };
        this.sortOptions = {
            title: "Sort By",
            message: "Choose sort direction",
            cancelButtonText: "Cancel",
            actions: ["Recent first", "Old first", "Expensive first", "Cheap first"]
        };
        this.pageRoute.activatedRoute
            .switchMap(function (activatedRoute) { return activatedRoute.params; })
            .forEach(function (params) {
            var year = +params["year"];
            var month = +params["month"];
            _this.startDate = moment(year + '-' + month + '-01').startOf('month').toDate();
            _this.endDate = moment(year + '-' + month + '-01').endOf('month').toDate();
        });
    }
    LastSpentComponent.prototype.ngOnInit = function () {
        console.log('init');
        this._loadItems();
    };
    LastSpentComponent.prototype._loadItems = function () {
        var _this = this;
        this.monthLabel = moment(this.startDate).format('MMM, YYYY');
        this.spentItemService.getByDateRange(this.startDate, this.endDate, this.sortCol, this.sortDir)
            .then(function (items) {
            console.log(JSON.stringify(items));
            _this.items = items;
            _this.totalSum = (!!items && items.length) ? items.map(function (item) { return item.excludeFromSum ? 0 : item.sum; }).reduce(function (sum, x) { return sum + x; }) : 0;
            _this.excludedSum = (!!items && items.length) ? items.map(function (item) { return item.excludeFromSum ? item.sum : 0; }).reduce(function (sum, x) { return sum + x; }) : 0;
        });
    };
    LastSpentComponent.prototype.showPrevMonth = function () {
        this.startDate = moment(this.startDate).subtract(1, 'month').startOf('month').toDate();
        this.endDate = moment(this.endDate).subtract(1, 'month').endOf('month').toDate();
        this._loadItems();
    };
    LastSpentComponent.prototype.showNextMonth = function () {
        this.startDate = moment(this.startDate).add(1, 'month').startOf('month').toDate();
        this.endDate = moment(this.endDate).add(1, 'month').endOf('month').toDate();
        this._loadItems();
    };
    LastSpentComponent.prototype.editItem = function (id) {
        console.log('Open edit form for item with ID:' + id);
        this.routerExtensions.navigate(["/spent-form", id], {});
    };
    LastSpentComponent.prototype.deleteItem = function (id) {
        var _this = this;
        dialogs_1.confirm(this.deleteConfirmOptions).then(function (result) {
            if (result) {
                _this.spentItemService.delete(id)
                    .then(function () {
                    _this._loadItems();
                });
            }
        });
    };
    LastSpentComponent.prototype._getSortExp = function (option) {
        switch (option) {
            case 'New first':
                return ['dateAdded', 'DESC'];
            case 'Old first':
                return ['dateAdded', 'ASC'];
            case 'Expensive first':
                return ['sum', 'Desc'];
            case 'Cheap first':
                return ['sum', 'ASC'];
            default:
                return ['dateAdded', 'DESC'];
        }
    };
    LastSpentComponent.prototype.openSortDialog = function () {
        var _this = this;
        dialogs_1.action(this.sortOptions).then(function (result) {
            var sortExpressionParts = _this._getSortExp(result);
            _this.sortCol = sortExpressionParts[0];
            _this.sortDir = sortExpressionParts[1];
            _this._loadItems();
        });
    };
    LastSpentComponent.prototype.onSearchLayoutLoaded = function (event) {
        if (event.object.android) {
            event.object.android.setFocusableInTouchMode(true);
        }
    };
    LastSpentComponent.prototype.onSearchBarLoaded = function (event) {
        if (event.object.android) {
            event.object.android.clearFocus();
        }
    };
    LastSpentComponent = __decorate([
        core_1.Component({
            selector: "app-last-spent",
            moduleId: module.id,
            templateUrl: "./last-spent.component.html",
            styleUrls: ["./last-spent.component.css"],
        }),
        __metadata("design:paramtypes", [spent_item_service_1.SpentItemService, nativescript_angular_1.RouterExtensions, nativescript_angular_1.PageRoute])
    ], LastSpentComponent);
    return LastSpentComponent;
}());
exports.LastSpentComponent = LastSpentComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFzdC1zcGVudC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJsYXN0LXNwZW50LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHNDQUFnRDtBQUNoRCxtRUFBOEQ7QUFDOUQsNkRBQWlFO0FBQ2pFLHNDQUEyQztBQUMzQywrQkFBaUM7QUFRakM7SUF1QkksNEJBQW9CLGdCQUFrQyxFQUFVLGdCQUFrQyxFQUFVLFNBQW9CO1FBQWhJLGlCQVNDO1FBVG1CLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFBVSxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBQVUsY0FBUyxHQUFULFNBQVMsQ0FBVztRQXJCekgsVUFBSyxHQUFHLEVBQUUsQ0FBQztRQUlWLFlBQU8sR0FBRyxXQUFXLENBQUM7UUFDdEIsWUFBTyxHQUFHLE1BQU0sQ0FBQztRQUNsQixhQUFRLEdBQUcsQ0FBQyxDQUFDO1FBQ2IsZ0JBQVcsR0FBRyxDQUFDLENBQUM7UUFDZix5QkFBb0IsR0FBRztZQUMzQixLQUFLLEVBQUUsZ0JBQWdCO1lBQ3ZCLE9BQU8sRUFBRSx5Q0FBeUM7WUFDbEQsWUFBWSxFQUFFLEtBQUs7WUFDbkIsZ0JBQWdCLEVBQUUsSUFBSTtTQUN6QixDQUFDO1FBQ00sZ0JBQVcsR0FBRztZQUNsQixLQUFLLEVBQUUsU0FBUztZQUNoQixPQUFPLEVBQUUsdUJBQXVCO1lBQ2hDLGdCQUFnQixFQUFFLFFBQVE7WUFDMUIsT0FBTyxFQUFFLENBQUMsY0FBYyxFQUFFLFdBQVcsRUFBRSxpQkFBaUIsRUFBRSxhQUFhLENBQUM7U0FDM0UsQ0FBQztRQUdFLElBQUksQ0FBQyxTQUFTLENBQUMsY0FBYzthQUN4QixTQUFTLENBQUMsVUFBQSxjQUFjLElBQUksT0FBQSxjQUFjLENBQUMsTUFBTSxFQUFyQixDQUFxQixDQUFDO2FBQ2xELE9BQU8sQ0FBQyxVQUFDLE1BQU07WUFDWixJQUFJLElBQUksR0FBRyxDQUFDLE1BQU0sQ0FB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QUFNLENBQUMsRUFBRTtZQUNuQixXQUFXLEVBQUUsNkJBQTZCO1lBQzFDLFNBQVMsRUFBRSxDQUFDLDRCQUE0QixDQUFDO1NBQzVDLENBQUM7eUNBd0J3QyxxQ0FBZ0IsRUFBNEIsdUNBQWdCLEVBQXFCLGdDQUFTO09BdkJ2SCxrQkFBa0IsQ0FnSDlCO0lBQUQseUJBQUM7Q0FBQSxBQWhIRCxJQWdIQztBQWhIWSxnREFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudCwgT25Jbml0fSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQge1NwZW50SXRlbVNlcnZpY2V9IGZyb20gXCIuLi9zaGFyZWQvc3BlbnQtaXRlbS5zZXJ2aWNlXCI7XHJcbmltcG9ydCB7UGFnZVJvdXRlLCBSb3V0ZXJFeHRlbnNpb25zfSBmcm9tIFwibmF0aXZlc2NyaXB0LWFuZ3VsYXJcIjtcclxuaW1wb3J0IHthY3Rpb24sIGNvbmZpcm19IGZyb20gXCJ1aS9kaWFsb2dzXCI7XHJcbmltcG9ydCAqIGFzIG1vbWVudCBmcm9tICdtb21lbnQnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogXCJhcHAtbGFzdC1zcGVudFwiLFxyXG4gICAgbW9kdWxlSWQ6IG1vZHVsZS5pZCxcclxuICAgIHRlbXBsYXRlVXJsOiBcIi4vbGFzdC1zcGVudC5jb21wb25lbnQuaHRtbFwiLFxyXG4gICAgc3R5bGVVcmxzOiBbXCIuL2xhc3Qtc3BlbnQuY29tcG9uZW50LmNzc1wiXSxcclxufSlcclxuZXhwb3J0IGNsYXNzIExhc3RTcGVudENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcblxyXG4gICAgcHVibGljIGl0ZW1zID0gW107XHJcbiAgICBwdWJsaWMgbW9udGhMYWJlbDogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSBzdGFydERhdGU6IERhdGU7XHJcbiAgICBwcml2YXRlIGVuZERhdGU6IERhdGU7XHJcbiAgICBwcml2YXRlIHNvcnRDb2wgPSAnZGF0ZUFkZGVkJztcclxuICAgIHByaXZhdGUgc29ydERpciA9ICdERVNDJztcclxuICAgIHB1YmxpYyB0b3RhbFN1bSA9IDA7XHJcbiAgICBwdWJsaWMgZXhjbHVkZWRTdW0gPSAwO1xyXG4gICAgcHJpdmF0ZSBkZWxldGVDb25maXJtT3B0aW9ucyA9IHtcclxuICAgICAgICB0aXRsZTogXCJDb25maXJtIERlbGV0ZVwiLFxyXG4gICAgICAgIG1lc3NhZ2U6IFwiRG8geW91IHJlYWxseSB3YW50IHRvIHJlbW92ZSB0aGlzIGl0ZW0/XCIsXHJcbiAgICAgICAgb2tCdXR0b25UZXh0OiBcIlllc1wiLFxyXG4gICAgICAgIGNhbmNlbEJ1dHRvblRleHQ6IFwiTm9cIlxyXG4gICAgfTtcclxuICAgIHByaXZhdGUgc29ydE9wdGlvbnMgPSB7XHJcbiAgICAgICAgdGl0bGU6IFwiU29ydCBCeVwiLFxyXG4gICAgICAgIG1lc3NhZ2U6IFwiQ2hvb3NlIHNvcnQgZGlyZWN0aW9uXCIsXHJcbiAgICAgICAgY2FuY2VsQnV0dG9uVGV4dDogXCJDYW5jZWxcIixcclxuICAgICAgICBhY3Rpb25zOiBbXCJSZWNlbnQgZmlyc3RcIiwgXCJPbGQgZmlyc3RcIiwgXCJFeHBlbnNpdmUgZmlyc3RcIiwgXCJDaGVhcCBmaXJzdFwiXVxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHNwZW50SXRlbVNlcnZpY2U6IFNwZW50SXRlbVNlcnZpY2UsIHByaXZhdGUgcm91dGVyRXh0ZW5zaW9uczogUm91dGVyRXh0ZW5zaW9ucywgcHJpdmF0ZSBwYWdlUm91dGU6IFBhZ2VSb3V0ZSkge1xyXG4gICAgICAgIHRoaXMucGFnZVJvdXRlLmFjdGl2YXRlZFJvdXRlXHJcbiAgICAgICAgICAgIC5zd2l0Y2hNYXAoYWN0aXZhdGVkUm91dGUgPT4gYWN0aXZhdGVkUm91dGUucGFyYW1zKVxyXG4gICAgICAgICAgICAuZm9yRWFjaCgocGFyYW1zKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgeWVhciA9ICtwYXJhbXNbXCJ5ZWFyXCJdO1xyXG4gICAgICAgICAgICAgICAgbGV0IG1vbnRoID0gK3BhcmFtc1tcIm1vbnRoXCJdO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdGFydERhdGUgPSBtb21lbnQoeWVhciArICctJyArIG1vbnRoICsgJy0wMScpLnN0YXJ0T2YoJ21vbnRoJykudG9EYXRlKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVuZERhdGUgPSBtb21lbnQoeWVhciArICctJyArIG1vbnRoICsgJy0wMScpLmVuZE9mKCdtb250aCcpLnRvRGF0ZSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICAgICAgICBjb25zb2xlLmxvZygnaW5pdCcpO1xyXG4gICAgICAgIHRoaXMuX2xvYWRJdGVtcygpO1xyXG4gICAgfVxyXG5cclxuICAgIF9sb2FkSXRlbXMoKSB7XHJcbiAgICAgICAgdGhpcy5tb250aExhYmVsID0gbW9tZW50KHRoaXMuc3RhcnREYXRlKS5mb3JtYXQoJ01NTSwgWVlZWScpO1xyXG4gICAgICAgIHRoaXMuc3BlbnRJdGVtU2VydmljZS5nZXRCeURhdGVSYW5nZSh0aGlzLnN0YXJ0RGF0ZSwgdGhpcy5lbmREYXRlLCB0aGlzLnNvcnRDb2wsIHRoaXMuc29ydERpcilcclxuICAgICAgICAgICAgLnRoZW4oKGl0ZW1zKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShpdGVtcykpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pdGVtcyA9IGl0ZW1zO1xyXG4gICAgICAgICAgICAgICAgdGhpcy50b3RhbFN1bSA9ICghIWl0ZW1zICYmIGl0ZW1zLmxlbmd0aCkgPyBpdGVtcy5tYXAoKGl0ZW0pID0+IGl0ZW0uZXhjbHVkZUZyb21TdW0gPyAwIDogaXRlbS5zdW0pLnJlZHVjZSgoc3VtLCB4KSA9PiBzdW0gKyB4KSA6IDA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmV4Y2x1ZGVkU3VtID0gKCEhaXRlbXMgJiYgaXRlbXMubGVuZ3RoKSA/IGl0ZW1zLm1hcCgoaXRlbSkgPT4gaXRlbS5leGNsdWRlRnJvbVN1bSA/IGl0ZW0uc3VtIDogMCkucmVkdWNlKChzdW0sIHgpID0+IHN1bSArIHgpIDogMDtcclxuICAgICAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBzaG93UHJldk1vbnRoKCkge1xyXG4gICAgICAgIHRoaXMuc3RhcnREYXRlID0gbW9tZW50KHRoaXMuc3RhcnREYXRlKS5zdWJ0cmFjdCgxLCAnbW9udGgnKS5zdGFydE9mKCdtb250aCcpLnRvRGF0ZSgpO1xyXG4gICAgICAgIHRoaXMuZW5kRGF0ZSA9IG1vbWVudCh0aGlzLmVuZERhdGUpLnN1YnRyYWN0KDEsICdtb250aCcpLmVuZE9mKCdtb250aCcpLnRvRGF0ZSgpO1xyXG4gICAgICAgIHRoaXMuX2xvYWRJdGVtcygpO1xyXG4gICAgfVxyXG5cclxuICAgIHNob3dOZXh0TW9udGgoKSB7XHJcbiAgICAgICAgdGhpcy5zdGFydERhdGUgPSBtb21lbnQodGhpcy5zdGFydERhdGUpLmFkZCgxLCAnbW9udGgnKS5zdGFydE9mKCdtb250aCcpLnRvRGF0ZSgpO1xyXG4gICAgICAgIHRoaXMuZW5kRGF0ZSA9IG1vbWVudCh0aGlzLmVuZERhdGUpLmFkZCgxLCAnbW9udGgnKS5lbmRPZignbW9udGgnKS50b0RhdGUoKTtcclxuICAgICAgICB0aGlzLl9sb2FkSXRlbXMoKTtcclxuICAgIH1cclxuXHJcbiAgICBlZGl0SXRlbShpZCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdPcGVuIGVkaXQgZm9ybSBmb3IgaXRlbSB3aXRoIElEOicgKyBpZCk7XHJcbiAgICAgICAgdGhpcy5yb3V0ZXJFeHRlbnNpb25zLm5hdmlnYXRlKFtcIi9zcGVudC1mb3JtXCIsIGlkXSwge30pO1xyXG4gICAgfVxyXG5cclxuICAgIGRlbGV0ZUl0ZW0oaWQpIHtcclxuICAgICAgICBjb25maXJtKHRoaXMuZGVsZXRlQ29uZmlybU9wdGlvbnMpLnRoZW4oKHJlc3VsdDogYm9vbGVhbikgPT4ge1xyXG4gICAgICAgICAgICBpZiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNwZW50SXRlbVNlcnZpY2UuZGVsZXRlKGlkKVxyXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbG9hZEl0ZW1zKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBfZ2V0U29ydEV4cChvcHRpb24pIHtcclxuICAgICAgICBzd2l0Y2ggKG9wdGlvbikge1xyXG4gICAgICAgICAgICBjYXNlICdOZXcgZmlyc3QnOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsnZGF0ZUFkZGVkJywnREVTQyddO1xyXG4gICAgICAgICAgICBjYXNlICdPbGQgZmlyc3QnOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsnZGF0ZUFkZGVkJywnQVNDJ107XHJcbiAgICAgICAgICAgIGNhc2UgJ0V4cGVuc2l2ZSBmaXJzdCc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWydzdW0nLCdEZXNjJ107XHJcbiAgICAgICAgICAgIGNhc2UgJ0NoZWFwIGZpcnN0JzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBbJ3N1bScsJ0FTQyddO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsnZGF0ZUFkZGVkJywnREVTQyddO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIG9wZW5Tb3J0RGlhbG9nKCkge1xyXG4gICAgICAgIGFjdGlvbih0aGlzLnNvcnRPcHRpb25zKS50aGVuKChyZXN1bHQpID0+IHtcclxuICAgICAgICAgICAgbGV0IHNvcnRFeHByZXNzaW9uUGFydHMgPSB0aGlzLl9nZXRTb3J0RXhwKHJlc3VsdCk7XHJcbiAgICAgICAgICAgIHRoaXMuc29ydENvbCA9IHNvcnRFeHByZXNzaW9uUGFydHNbMF07XHJcbiAgICAgICAgICAgIHRoaXMuc29ydERpciA9IHNvcnRFeHByZXNzaW9uUGFydHNbMV07XHJcbiAgICAgICAgICAgIHRoaXMuX2xvYWRJdGVtcygpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIG9uU2VhcmNoTGF5b3V0TG9hZGVkKGV2ZW50KSB7XHJcbiAgICAgICAgaWYgKGV2ZW50Lm9iamVjdC5hbmRyb2lkKSB7XHJcbiAgICAgICAgICAgIGV2ZW50Lm9iamVjdC5hbmRyb2lkLnNldEZvY3VzYWJsZUluVG91Y2hNb2RlKHRydWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBvblNlYXJjaEJhckxvYWRlZChldmVudCkge1xyXG4gICAgICAgIGlmIChldmVudC5vYmplY3QuYW5kcm9pZCkge1xyXG4gICAgICAgICAgICBldmVudC5vYmplY3QuYW5kcm9pZC5jbGVhckZvY3VzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59Il19